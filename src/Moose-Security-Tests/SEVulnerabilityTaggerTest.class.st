Class {
	#name : 'SEVulnerabilityTaggerTest',
	#superclass : 'TestCase',
	#instVars : [
		'aFirstModel',
		'aSecondModel'
	],
	#category : 'Moose-Security-Tests',
	#package : 'Moose-Security-Tests'
}

{ #category : 'running' }
SEVulnerabilityTaggerTest >> setUp [

	| aSerializableClass serInterface aNonSerializableClass |
	super setUp.

	"Put here a common initialization logic for tests"
	"crÃ©er un java model "

	aFirstModel := FamixJavaModel new
		               name: 'TestingModel';
		               yourself.
	aSerializableClass := aFirstModel newClassNamed: 'ASerializableClass'.
	aNonSerializableClass := aFirstModel newClassNamed: 'ANonSerializableClass'.

	serInterface := aFirstModel newInterface
		                name: 'Serializable';
		                yourself.

	aSecondModel := FamixJavaModel new
		                name: 'TestingModelUpdated';
		                yourself.

	aNonSerializableClass := aSecondModel newClassNamed: 'ANonSerializableClass'.
	aSerializableClass := aSecondModel newClassNamed: 'ASerializableClass'.

	serInterface := aSecondModel newInterface
		                name: 'Serializable';
		                yourself.
	aSecondModel newImplementation
		implementingClass: aSerializableClass;
		interface: serInterface
]

{ #category : 'tests' }
SEVulnerabilityTaggerTest >> testDiffTagsBetweenAModelAndAnotherModel [
	"This test should be changed to make it more simple"

	| taggedEntitiesAFirstModel taggedEntitiesaSecondModel taggedEntitiesaFirstModelMooseName taggedEntitiesASecondModelMooseName taggedASecondDiffAFirst tagASecondModel |
	SEVulnerabilityTagger removeAllGeneratedTagsOf: aFirstModel.
	SEVulnerabilityTagger removeAllGeneratedTagsOf: aSecondModel.

	SEVulnerabilityTagger tagAllVulnerabilitiesOf: aFirstModel.
	SEVulnerabilityTagger tagAllVulnerabilitiesOf: aSecondModel.

	self denyEmpty: aSecondModel allTags.

	taggedEntitiesAFirstModel := aFirstModel select: [ :e | e isTagged ].
	taggedEntitiesaSecondModel := aSecondModel select: [ :e | e isTagged ].
	taggedEntitiesaFirstModelMooseName := taggedEntitiesAFirstModel
		                                      collect: #mooseName.

	taggedEntitiesASecondModelMooseName := taggedEntitiesaSecondModel
		                                       collect: #mooseName.

	taggedASecondDiffAFirst := taggedEntitiesaSecondModel reject: [ :e |
		                           taggedEntitiesAFirstModel includes:
			                           e mooseName ].
	aSecondModel createTagNamed: 'SecondMinusFirst'.
	tagASecondModel := aSecondModel allTags detect: [ :t |
		                   t name = 'SecondMinusFirst' ].
	taggedASecondDiffAFirst do: [ :e | e tagWith: tagASecondModel ].

	self denyEmpty: taggedASecondDiffAFirst
]

{ #category : 'tests' }
SEVulnerabilityTaggerTest >> testRemoveAllGeneratedTagsofAModel [

	SEVulnerabilityTagger tagAllVulnerabilitiesOf: aSecondModel.

	self denyEmpty: aSecondModel allTags.

	SEVulnerabilityTagger removeAllGeneratedTagsOf: aSecondModel.

	self assertEmpty: aSecondModel allTags
]

{ #category : 'tests' }
SEVulnerabilityTaggerTest >> testRemoveAllGeneratedTagsofAModelWithoutVulnerability [

	SEVulnerabilityTagger tagAllVulnerabilitiesOf: aFirstModel.

	self assertEmpty: aFirstModel allTags.

	SEVulnerabilityTagger removeAllGeneratedTagsOf: aFirstModel.

	self assertEmpty: aFirstModel allTags
]

{ #category : 'tests' }
SEVulnerabilityTaggerTest >> testTagAllVulnerabilitiesOfAModel [

	SEVulnerabilityTagger removeAllGeneratedTagsOf: aSecondModel.

	self assert: aSecondModel allTags isEmpty.

	SEVulnerabilityTagger tagAllVulnerabilitiesOf: aSecondModel.

	self denyEmpty: aSecondModel allTags
]

{ #category : 'tests' }
SEVulnerabilityTaggerTest >> testTagAllVulnerabilitiesOfAModelWithoutVlunerability [

	SEVulnerabilityTagger removeAllGeneratedTagsOf: aFirstModel.

	self assertEmpty: aFirstModel allTags.

	SEVulnerabilityTagger tagAllVulnerabilitiesOf: aFirstModel.

	self assertEmpty: aFirstModel allTags
]
